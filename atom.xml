<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tuotuo的博客</title>
  
  <subtitle>tuotuo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://htuotuo.top/"/>
  <updated>2018-02-24T12:00:14.090Z</updated>
  <id>http://htuotuo.top/</id>
  
  <author>
    <name>tuotuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://htuotuo.top/2018/02/24/linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://htuotuo.top/2018/02/24/linux常见问题/</id>
    <published>2018-02-24T11:50:02.672Z</published>
    <updated>2018-02-24T12:00:14.090Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Linux常见问题整合"><a href="#Linux常见问题整合" class="headerlink" title="Linux常见问题整合"></a>Linux常见问题整合</h2><hr><p>##1.手动配置IP地址<br>*1、自动获取IP地址<br>    虚拟机使用桥接模式，相当于连接到物理机的网络里，物理机网络有DHCP服务器自动分配IP地址。</p><pre><code>#dhclient 自动获取ip地址命令#ifconfig 查询系统里网卡信息，ip地址、MAC地址分配到ip地址后，用物理机进行ping ip地址，检测是否ping通。</code></pre><p>*2、手动设置ip地址</p><pre><code>如果虚拟机不能自动获取IP，只能手动配置，配置方法如下：输入命令#vi /etc/sysconfig/network-scripts/ifcfg-eth0编辑网卡的配置文件输入上述命令后回车，打开配置文件，使用方向键移动光标到最后一行，按字母键“O”，进入编辑模式，输入以下内容：IPADDR=192.168.25.10NETMASK=255.255.255.0GATEWAY=192.168.25.1另外光标移动到”ONBOOT=no”这一行，更改为ONBOOT=yes“BOOTPROTO=dhcp”，更改为BOOTPROTO=none完成后，按一下键盘左上角ESC键，输入:wq 在屏幕的左下方可以看到，输入回车保存配置文件。之后需要重启一下网络服务，命令为#service network restart网络重启后，eth0的ip就生效了，使用命令#ifconfigeth0 查看接下来检测配置的IP是否可以ping通，在物理机使用快捷键WINDOWS+R 打开运行框，输入命令cmd，输入ping 192.168.4.10 进行检测，ping通说明IP配置正确。备注：我所在的物理机网段为192.168.4.0 网段。大家做实验的时候根据自己的环境进行设定，保持虚拟机和物理机在同一网段即可。</code></pre><p>*3、使用NAT模式</p><pre><code>虚拟机网络连接使用NAT模式，物理机网络连接使用Vmnet8。虚拟机设置里面——网络适配器，网络连接选择NAT模式。虚拟机菜单栏—编辑—虚拟网络编辑器，选择Vmnet8 NAT模式，1．在最下面子网设置ip为192.168.20.0 子网掩码255.255.255.02．NAT设置里面网关IP为192.168.20.23．使用本地DHCP服务将IP地址分配给虚拟机不勾选设置完成后点击应用退出。CentOS 6.5 配置IP地址的三种方法物理机网络连接VMNet8 手动设置ip地址 192.168.20.1 子网掩码255.255.255.0网关和DNS地址为192.168.20.2（即虚拟机NAT的网关地址）编辑linux网卡eth0的配置文件#vi /etc/sysconfig/network-scripts/ifcfg-eth0输入上述命令后回车，打开配置文件，使用方向键移动光标到最后一行，按字母键“O”，进入编辑模式，输入以下内容：IPADDR=192.168.25.3NETMASK=255.255.255.0GATEWAY=192.168.25.2另外光标移动到”ONBOOT=no”这一行，更改为ONBOOT=yes“BOOTPROTO=dhcp”，更改为BOOTPROTO=none完成后，按一下键盘左上角ESC键，输入:wq 在屏幕的左下方可以看到，输入回车保存配置文件。设置DNS地址,运行命令#vi /etc/resolv.conf光标移动到空行，按“O”键，输入 nameserver 192.168.25.2 退出按ESC键，输入:wq 回车保存配置文件。重启网络服务#service network restart重启之后#ifconfig</code></pre><p>##2.unzip命令安装<br>    yum install zip unzip</p><p>##3.解压缩和压缩<br>    tar命令位于/bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。</p><pre><code>常用参数：-c：创建一个新tar文件-v：显示运行过程的信息-f：指定文件名-z：调用gzip压缩命令进行压缩-t：查看压缩文件的内容-x：解开tar文件</code></pre><p>##4.jdk配置<br>    //打开/etc/profile文件</p><pre><code># vim /etc/profile</code></pre><p><code>在文件末尾插入如下内容</code></p><pre><code>export JAVA_HOME=/home/soft/jdk1.8.0_111 export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH最后执行 source /etc/profile</code></pre><p>##5.删除<br>    不询问递归删除（慎用）<br>    rm -rf  a  ?  不询问递归删除<br>    rm -rf *   ?   删除所有文件</p><p>##6.管道<br>    管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。<br>    示例<br>    ls –help | more  分页查询帮助信息<br>    ps –ef | grep java  查询名称中包含java的进程</p><pre><code>ifconfig | morecat index.html | moreps –ef | grep aio</code></pre><p>##7.关闭防火墙<br>    entOS 6.5关闭防火墙步骤</p><pre><code>临时关闭命令：  service iptables stop 永久关闭防火墙：chkconfig iptables off开启改为 on两个命令同时运行，运行完成后查看防火墙关闭状态 service iptables status</code></pre><p>##8.出现centos yum报错Loaded plugins: fastestmirror </p><pre><code>vi /etc/yum/pluginconf.d/fastestmirror.conf enabled = 0vi /etc/yum.confplugins=0yum clean dbcache</code></pre><p>##9.在使用yum时如果出现：Cannot find a valid baseurl for repo: base/7/x86_64<br>    这种情况通常是，是因为没有配置DNS服务器。</p><pre><code>解决方法：用VI编辑resolv.conf文件命令vi /etc/resolv.conf添加：nameserver 114.114.114.114    国内的wq保存退出即可</code></pre><p>##10.授予权限  /<strong>/</strong>/**/c: 权限不够</p><pre><code>chmod +x /**/**/**/c</code></pre><p>##11.Redis的安装<br>    Redis是c语言开发的。<br>    安装redis需要c语言的编译环境。如果没有gcc需要在线安装。</p><pre><code>先查询系统中是否有gcc命令，如果出现下面提示，则表示你的系统中已经安装好了gcc命令    [root@admin ~]# gccgcc: 没有输入文件[root@admin ~]# makemake: *** 没有指明目标并且找不到 makefile。 停止。安装：在线，必须配置的ip地址与虚拟机网关在统一个网段![](https://i.imgur.com/2aWQZVJ.png)yum install gcc-c++安装步骤：第一步：redis的源码包上传到linux系统。第二步：解压缩redis。第三步：编译。make 第四步：安装。make install PREFIX=/usr/local/redis</code></pre><h3 id="redis的启动："><a href="#redis的启动：" class="headerlink" title="redis的启动："></a>redis的启动：</h3><pre><code>前端启动：[root@localhost bin]# ./redis-server 后台启动：把/root/redis-3.0.0/redis.conf复制到/usr/local/redis/bin目录下[root@localhost redis-3.0.0]# cp redis.conf /usr/local/redis/bin/修改配置文件：[root@localhost bin]# ./redis-server redis.conf查看redis进程：[root@localhost bin]# ps aux|grep redisroot      5190  0.1  0.3  33936  1712 ?        Ssl  18:23   0:00 ./redis-server *:6379    root      5196  0.0  0.1   4356   728 pts/0    S+   18:24   0:00 grep redis[root@localhost bin]# </code></pre><p>##在使用yum命令进行安装时可能出现：<br>    Could not retrieve mirrorlist <a href="http://mirrorlist.centos.org/?release=6&amp;arch=x86_64&amp;repo=os" target="_blank" rel="noopener">http://mirrorlist.centos.org/?release=6&amp;arch=x86_64&amp;repo=os</a> error was<br>    14: PYCURL ERROR 6 - “Couldn’t resolve host ‘mirrorlist.centos.org’”<br>    Error: Cannot find a valid baseurl for repo: base<br>    错误，如果出现此错误：</p><pre><code>解决：解决方法：编辑vi resolv.conf文件，添加：nameserver 8.8.8.8 </code></pre><p>##cp命令<br>    cp(选项)(参数)</p><pre><code>选项-a：此参数的效果和同时指定&quot;-dpR&quot;参数相同；-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；-f：强行复制文件或目录，不论目标文件或目录是否已存在；-i：覆盖既有文件之前先询问用户；-l：对源文件建立硬连接，而非复制文件；-p：保留源文件或目录的属性；-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；-s：对源文件建立符号连接，而非复制文件；-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；-b：覆盖已存在的文件目标前将目标文件备份；-v：详细显示命令执行的操作。</code></pre><p>##文本编辑命令</p><p>###进入vi/vim的命令<br>    vi/vim filename :打开或新建文件，并将光标置于第一行首<br>    vi/vim +n filename ：打开文件，并将光标置于第n行首<br>    vi/vim + filename ：打开文件，并将光标置于最后一行首<br>    vi/vim +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处<br>    vi/vim -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename<br>    vi/vim filename….filename ：打开多个文件，依次进行编辑</p><p>###屏幕翻滚类命令<br>    Ctrl+u：向文件首翻半屏<br>    Ctrl+d：向文件尾翻半屏<br>    Ctrl+f：向文件尾翻一屏<br>    Ctrl＋b；向文件首翻一屏<br>    nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</p><p>###插入文本类命令<br>    i ：在光标前<br>    I ：在当前行首<br>    a：光标后<br>    A：在当前行尾<br>    o：在当前行之下新开一行<br>    O：在当前行之上新开一行<br>    r：替换当前字符<br>    R：替换当前字符及其后的字符，直至按ESC键<br>    s：从当前光标位置处开始，以输入的文本替代指定数目的字符<br>    S：删除指定数目的行，并以所输入文本代替之<br>    ncw或nCW：修改指定数目的字<br>    nCC：修改指定数目的行</p><p>###删除命令<br>    ndw或ndW：删除光标处开始及其后的n-1个字<br>    do：删至行首<br>    d$：删至行尾<br>    ndd：删除当前行及其后n-1行<br>    x或X：删除一个字符，x删除光标后的，而X删除光标前的<br>    Ctrl+u：删除输入方式下所输入的文本</p><p>###搜索及替换命令<br>    /pattern：从光标开始处向文件尾搜索pattern<br>    ?pattern：从光标开始处向文件首搜索pattern<br>    n：在同一方向重复上一次搜索命令<br>    N：在反方向上重复上一次搜索命令<br>    ：s/p1/p2/g：将当前行中所有p1均用p2替代<br>    ：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代<br>    ：g/p1/s//p2/g：将文件中所有p1均用p2替换</p><p>###选项设置<br>    all：列出所有选项设置情况<br>    term：设置终端类型<br>    ignorance：在搜索中忽略大小写<br>    list：显示制表位(Ctrl+I)和行尾标志（$)<br>    number：显示行号<br>    report：显示由面向行的命令修改过的数目<br>    terse：显示简短的警告信息<br>    warn：在转到别的文件时若没保存当前文件则显示NO write信息<br>    nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符<br>    nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始<br>    mesg：允许vi显示其他用户用write写到自己终端上的信息</p><p>###末行模式命令<br>    ：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下<br>    ：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下<br>    ：n1,n2 d ：将n1行到n2行之间的内容删除<br>    ：w ：保存当前文件<br>    ：e filename：打开文件filename进行编辑<br>    ：x：保存当前文件并退出<br>    ：q：退出vi<br>    ：q!：不保存文件并退出vi<br>    ：!command：执行shell命令command<br>    ：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入<br>    ：r!command：将命令command的输出结果放到当前行 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Linux常见问题整合&quot;&gt;&lt;a href=&quot;#Linux常见问题整合&quot; class=&quot;headerlink&quot; title=&quot;Linux常见问题整合&quot;&gt;&lt;/a&gt;Linux常见问题整合&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;##1.手动配置IP地址&lt;br&gt;*1、自动获取I
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://htuotuo.top/2018/02/24/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://htuotuo.top/2018/02/24/redis常用命令/</id>
    <published>2018-02-24T11:50:02.670Z</published>
    <updated>2018-02-24T11:59:58.217Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Redis-存储数据常用命令"><a href="#Redis-存储数据常用命令" class="headerlink" title="Redis 存储数据常用命令"></a>Redis 存储数据常用命令</h2><hr><p>##1.Redis hash 常用命令<br>    1、HDEL key field1 [field2] 删除一个或多个哈希表字段`</p><pre><code>2、HEXISTS key field    查看哈希表 key 中，指定的字段是否存在。3、HGET key field    获取存储在哈希表中指定字段的值。`4、HGETALL key    获取在哈希表中指定 key 的所有字段和值5、HKEYS key    获取所有哈希表中的字段6、HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 。7、HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。8、HLEN key    获取哈希表中字段的数量9、HMGET key field1 [field2]    获取所有给定字段的值10、HMSET key field1 value1 [field2 value2 ]    同时将多个 field-value (域-值)对设置到哈希表 key 中。11、HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。12、HSETNX key field value    只有在字段 field 不存在时，设置哈希表字段的值。</code></pre><p>##2.Redis String 常用命令<br>    1、SET key value  设置指定 key 的值</p><pre><code>2、GET key  获取指定 key 的值。3、GETRANGE key start end  返回 key 中字符串值的子字符4、GETSET key value  将给定 key 的值设为 value ，并返回 key 的旧值(old value)。5、GETBIT key offset 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。6、MGET key1 [key2..]  获取所有(一个或多个)给定 key 的值。7、SETBIT key offset value  对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。8、SETEX key seconds value  将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。9、SETNX key value  只有在 key 不存在时设置 key 的值。10、SETRANGE key offset value 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。11、STRLEN key  返回 key 所储存的字符串值的长度。12、MSET key value [key value ...]  同时设置一个或多个 key-value 对。13、MSETNX key value [key value ...]同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。14、PSETEX key milliseconds value这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。15、INCR key 将 key 中储存的数字值增一。16、INCRBY key increment 将 key 所储存的值加上给定的增量值（increment） 。17、INCRBYFLOAT key increment  将 key 所储存的值加上给定的浮点增量值（increment） 。18、DECR key 将 key 中储存的数字值减一。19、DECRBY key decrement key 所储存的值减去给定的减量值（decrement） 。20、APPEND key value如果 key 已经存在并且是一个字符串， APPEND 命令将 指定value 追加到改 key 原来的值（value）的末尾。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Redis-存储数据常用命令&quot;&gt;&lt;a href=&quot;#Redis-存储数据常用命令&quot; class=&quot;headerlink&quot; title=&quot;Redis 存储数据常用命令&quot;&gt;&lt;/a&gt;Redis 存储数据常用命令&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;##1.Redis ha
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://htuotuo.top/2018/02/24/Excel%E8%A7%A3%E6%9E%90-%E7%94%9F%E6%88%90-POI%20%E6%8A%80%E6%9C%AF/"/>
    <id>http://htuotuo.top/2018/02/24/Excel解析-生成-POI 技术/</id>
    <published>2018-02-24T11:35:06.236Z</published>
    <updated>2018-02-24T12:00:24.391Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Excel-解析、生成：-POI-技术"><a href="#Excel-解析、生成：-POI-技术" class="headerlink" title="Excel 解析、生成： POI 技术"></a>Excel 解析、生成： POI 技术</h2><hr><pre><code>HSSF 解析 Excel 97-2007 格式 （.xls）XSSF 解析 Excel 2007 格式 （.xlsx ）</code></pre><h2 id="1-导入maven坐标"><a href="#1-导入maven坐标" class="headerlink" title="1.导入maven坐标"></a>1.导入maven坐标</h2><pre><code>基于 maven 坐标导入 POI 支持poi… jar 解析 HSSFpoi ooxml .. jar 解析 XSSF （以来 POI 包 ）</code></pre><h2 id="解析-Excel-逻辑"><a href="#解析-Excel-逻辑" class="headerlink" title="解析 Excel 逻辑"></a>解析 Excel 逻辑</h2><pre><code>工作薄 --- sheet --- row --- cell基于struts2进行文件上传的并解析// 接收上传文件private File file;public void setFile(File file) {    this.file = file;}// 批量区域数据导入@Action(value = &quot;area_batchImport&quot;)public String batchImport() throws IOException {    //创建区域集合    List&lt;Area&gt; areas = new ArrayList&lt;Area&gt;();    // 编写解析代码逻辑    // 基于.xls 格式解析 HSSF，也可以直接使用父类Workbook,可以解析xls和xlsx    // 1、 加载Excel文件对象    HSSFWorkbook hssfWorkbook = new HSSFWorkbook(new FileInputStream(file));    // 2、 读取一个sheet    HSSFSheet sheet=hssfWorkbook.getSheetAt(0);    // 3、 读取sheet中每一行    for (Row row : sheet) {        // 一行数据 对应 一个区域对象        //根据自己导入的数据表格格式进行解析，通常第一行为表头直接跳过        if (row.getRowNum() == 0) {            // 第一行 跳过            continue;        }        // 跳过空行        if (row.getCell(0) == null                || StringUtils.isBlank(row.getCell(0).getStringCellValue())) {            continue;        }        Area area = new Area();        area.setId(row.getCell(0).getStringCellValue());        area.setProvince(row.getCell(1).getStringCellValue());        area.setCity(row.getCell(2).getStringCellValue());        area.setDistrict(row.getCell(3).getStringCellValue());        area.setPostcode(row.getCell(4).getStringCellValue());        // 基于pinyin4j生成城市编码和简码,导入pingyin4J的坐标        String province = area.getProvince();        String city = area.getCity();        String district = area.getDistrict();        //去除省市区后缀        province = province.substring(0, province.length() - 1);        city = city.substring(0, city.length() - 1);        district = district.substring(0, district.length() - 1);        // 简码        String[] headArray = PinYin4jUtils.getHeadByString(province + city                + district);        StringBuffer buffer = new StringBuffer();        for (String headStr : headArray) {            buffer.append(headStr);        }        String shortcode = buffer.toString();        area.setShortcode(shortcode);        // 城市编码        String citycode = PinYin4jUtils.hanziToPinyin(city, &quot;&quot;);        area.setCitycode(citycode);        areas.add(area);    }    // 调用业务层    areaService.saveBatch(areas);    return NONE;}</code></pre><h2 id="生成-Excel-逻辑"><a href="#生成-Excel-逻辑" class="headerlink" title="生成 Excel 逻辑"></a>生成 Excel 逻辑</h2><pre><code>编写 ReportAction 添加 exportXls 方法POI 生成 Excel 步骤写 Excel 过程一样，新建 Excel 文档 -- 新建 Sheet -- 新建 Row --新建 Cell 单元格 -- 写单元格数据POI 生成 HSSF （xls）和 XSSF （xlsx）// 导出运单 报表     @Action(&quot;report_exportXls&quot;)    public String exportXls() throws IOException {        // 查询出 满足当前条件 结果数据        List&lt;WayBill&gt; wayBills = wayBillService.findWayBills(model);        // 生成Excel文件        HSSFWorkbook hssfWorkbook = new HSSFWorkbook();        HSSFSheet sheet = hssfWorkbook.createSheet(&quot;运单数据&quot;);        // 表头        HSSFRow headRow = sheet.createRow(0);        headRow.createCell(0).setCellValue(&quot;运单号&quot;);        headRow.createCell(1).setCellValue(&quot;寄件人&quot;);        headRow.createCell(2).setCellValue(&quot;寄件人电话&quot;);        headRow.createCell(3).setCellValue(&quot;寄件人地址&quot;);        headRow.createCell(4).setCellValue(&quot;收件人&quot;);        headRow.createCell(5).setCellValue(&quot;收件人电话&quot;);        headRow.createCell(6).setCellValue(&quot;收件人地址&quot;);        // 表格数据        for (WayBill wayBill : wayBills) {            HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);            dataRow.createCell(0).setCellValue(wayBill.getWayBillNum());            dataRow.createCell(1).setCellValue(wayBill.getSendName());            dataRow.createCell(2).setCellValue(wayBill.getSendMobile());            dataRow.createCell(3).setCellValue(wayBill.getSendAddress());            dataRow.createCell(4).setCellValue(wayBill.getRecName());            dataRow.createCell(5).setCellValue(wayBill.getRecMobile());            dataRow.createCell(6).setCellValue(wayBill.getRecAddress());        }        // 下载导出        // 设置头信息        ServletActionContext.getResponse().setContentType(                &quot;application/vnd.ms-excel&quot;);        String filename = &quot;运单数据.xls&quot;;        //设置浏览器编码        String agent = ServletActionContext.getRequest()                .getHeader(&quot;user-agent&quot;);        filename = FileUtils.encodeDownloadFilename(filename, agent);        //设置文件头以下载形式打开        ServletActionContext.getResponse().setHeader(&quot;Content-Disposition&quot;,                &quot;attachment;filename=&quot; + filename);        ServletOutputStream outputStream = ServletActionContext.getResponse()                .getOutputStream();        hssfWorkbook.write(outputStream);        // 关闭        hssfWorkbook.close();        return NONE;    }</code></pre><p>##生成pdf文件</p><p>###使用java原生代码生成pdf文件<br>        @Action(“report_exportPdf”)<br>        public String exportPdf() throws IOException, DocumentException {<br>            // 查询出 满足当前条件 结果数据<br>            List<waybill> wayBills = wayBillService.findWayBills(model);</waybill></p><pre><code>    // 下载导出    // 设置头信息    ServletActionContext.getResponse().setContentType(&quot;application/pdf&quot;);    String filename = &quot;运单数据.pdf&quot;;    String agent = ServletActionContext.getRequest()            .getHeader(&quot;user-agent&quot;);    filename = FileUtils.encodeDownloadFilename(filename, agent);    ServletActionContext.getResponse().setHeader(&quot;Content-Disposition&quot;,            &quot;attachment;filename=&quot; + filename);    // 生成PDF文件    Document document = new Document();    PdfWriter.getInstance(document, ServletActionContext.getResponse()            .getOutputStream());    document.open();    // 写PDF数据    // 向document 生成pdf表格    Table table = new Table(7);    table.setWidth(80); // 宽度    table.setBorder(1); // 边框    table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER); // 水平对齐方式    table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP); // 垂直对齐方式    // 设置表格字体    BaseFont cn = BaseFont.createFont(&quot;STSongStd-Light&quot;, &quot;UniGB-UCS2-H&quot;,            false);    Font font = new Font(cn, 10, Font.NORMAL, Color.BLUE);    // 写表头    table.addCell(buildCell(&quot;运单号&quot;, font));    table.addCell(buildCell(&quot;寄件人&quot;, font));    table.addCell(buildCell(&quot;寄件人电话&quot;, font));    table.addCell(buildCell(&quot;寄件人地址&quot;, font));    table.addCell(buildCell(&quot;收件人&quot;, font));    table.addCell(buildCell(&quot;收件人电话&quot;, font));    table.addCell(buildCell(&quot;收件人地址&quot;, font));    // 写数据    for (WayBill wayBill : wayBills) {        table.addCell(buildCell(wayBill.getWayBillNum(), font));        table.addCell(buildCell(wayBill.getSendName(), font));        table.addCell(buildCell(wayBill.getSendMobile(), font));        table.addCell(buildCell(wayBill.getSendAddress(), font));        table.addCell(buildCell(wayBill.getRecName(), font));        table.addCell(buildCell(wayBill.getRecMobile(), font));        table.addCell(buildCell(wayBill.getRecAddress(), font));    }    // 将表格加入文档    document.add(table);    document.close();    return NONE;}private Cell buildCell(String content, Font font)        throws BadElementException {    Phrase phrase = new Phrase(content, font);    return new Cell(phrase);}</code></pre><p>###使用jasperReport技术生成pdf文件<br>        @Action(“report_exportJasperPdf”)<br>        public String exportJasperPdf() throws IOException, DocumentException,<br>                JRException, SQLException {<br>            // 查询出 满足当前条件 结果数据<br>            List<waybill> wayBills = wayBillService.findWayBills(model);</waybill></p><pre><code>        // 下载导出        // 设置头信息        ServletActionContext.getResponse().setContentType(&quot;application/pdf&quot;);        String filename = &quot;运单数据.pdf&quot;;        String agent = ServletActionContext.getRequest()                .getHeader(&quot;user-agent&quot;);        filename = FileUtils.encodeDownloadFilename(filename, agent);        ServletActionContext.getResponse().setHeader(&quot;Content-Disposition&quot;,                &quot;attachment;filename=&quot; + filename);        // 根据 jasperReport模板 生成pdf,借助ireport工具生成模板        // 读取模板文件        String jrxml = ServletActionContext.getServletContext().getRealPath(                &quot;/WEB-INF/jasper/waybill.jrxml&quot;);        JasperReport report = JasperCompileManager.compileReport(jrxml);        // 设置模板数据，根据模板样式来设置参数        // Parameter变量        Map&lt;String, Object&gt; paramerters = new HashMap&lt;String, Object&gt;();        paramerters.put(&quot;company&quot;, &quot;传智播客&quot;);        // Field变量        JasperPrint jasperPrint = JasperFillManager.fillReport(report,                paramerters, new JRBeanCollectionDataSource(wayBills));        // 生成PDF客户端        JRPdfExporter exporter = new JRPdfExporter();        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);        exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,                ServletActionContext.getResponse().getOutputStream());        exporter.exportReport();// 导出        ServletActionContext.getResponse().getOutputStream().close();        return NONE;    }}</code></pre><p>##附加ireport工具使用</p><p>##IReport 报表模板简介和设置中文生成</p><p>###1、 新建 JasperReport 模板文件 .jrxml</p><p>###2、 设置默认语言<br>    对输入中文内容 设置组件属性<br><img src="https://i.imgur.com/H4eh44k.png" alt=""></p><pre><code>在 IReport 引入 ITextAsian.jar 字库在工具选项中    </code></pre><p><img src="https://i.imgur.com/hmOetdY.png" alt=""></p><p>###3、 了解报表模板结构<br>    Title: 报表标题<br>    PageHeader: 页眉<br>    ColumnHeader: 表格列标题<br>    Detail： 表格数据内容<br>    ColumnFooter： 表格页脚<br>    PageFooter： 页脚<br>    Summary: 摘要</p><p>###4、 常用报表组件<br><img src="https://i.imgur.com/lZrtNKt.png" alt=""></p><pre><code>设置预览格式为 PDF</code></pre><p>##4.3． IReport 配置数据库连接，基于数据表生成报表<br>    1、 点击按钮配置数据库连接<br>    新建 JDBC 连接<br><img src="https://i.imgur.com/VvJwgM5.png" alt=""><br>    2、 在 ireport 添加 oracle 的 jdbc 驱动<br><img src="https://i.imgur.com/qqPYAOd.png" alt=""><br><img src="https://i.imgur.com/uIXnf1h.png" alt=""><br>    3、 通过 ReportQuery 查询数据库<br><img src="https://i.imgur.com/vzo4vXn.png" alt=""><br><img src="https://i.imgur.com/TmPcw2t.png" alt=""><br>    4、 设计报表<br><img src="https://i.imgur.com/Qlhe23r.png" alt=""></p><p>##4.4． JasperResport 根据模板文件 生成报表<br>    1、 设置 ireport 字段 自动换行<br><img src="https://i.imgur.com/HsGtGsM.png" alt=""></p><pre><code>2、 将 waybill.jrxml 复制 bos_management3、 在 waybill_manage.html 页面添加按钮4、 在 common-parent 导入 jasperReport 开发包5、 在 ReportAction 添加 exportJasperPdf 方法</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Excel-解析、生成：-POI-技术&quot;&gt;&lt;a href=&quot;#Excel-解析、生成：-POI-技术&quot; class=&quot;headerlink&quot; title=&quot;Excel 解析、生成： POI 技术&quot;&gt;&lt;/a&gt;Excel 解析、生成： POI 技术&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://htuotuo.top/2018/02/10/hello-world/"/>
    <id>http://htuotuo.top/2018/02/10/hello-world/</id>
    <published>2018-02-09T18:05:24.525Z</published>
    <updated>2018-02-09T18:05:24.525Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
